diff --git a/src/ftxui/component/screen_interactive.cpp b/src/ftxui/component/screen_interactive.cpp
index 77d164ac..6a902ba6 100644
--- a/src/ftxui/component/screen_interactive.cpp
+++ b/src/ftxui/component/screen_interactive.cpp
@@ -48,7 +48,12 @@
 #endif
 #else
 #include <sys/select.h>  // for select, FD_ISSET, FD_SET, FD_ZERO, fd_set, timeval
+#ifndef __SWITCH__
 #include <termios.h>  // for tcsetattr, termios, tcgetattr, TCSANOW, cc_t, ECHO, ICANON, VMIN, VTIME
+#else
+#include <switch.h>
+#include <fcntl.h>
+#endif
 #include <unistd.h>  // for STDIN_FILENO, read
 #endif
 
@@ -506,17 +511,17 @@ bool ScreenInteractive::HasQuitted() {
 // private
 void ScreenInteractive::PreMain() {
   // Suspend previously active screen:
-  if (g_active_screen) {
-    std::swap(suspended_screen_, g_active_screen);
-    // Reset cursor position to the top of the screen and clear the screen.
-    suspended_screen_->ResetCursorPosition();
-    std::cout << suspended_screen_->ResetPosition(/*clear=*/true);
-    suspended_screen_->dimx_ = 0;
-    suspended_screen_->dimy_ = 0;
-
-    // Reset dimensions to force drawing the screen again next time:
-    suspended_screen_->Uninstall();
-  }
+  // if (g_active_screen) {
+  //   std::swap(suspended_screen_, g_active_screen);
+  //   // Reset cursor position to the top of the screen and clear the screen.
+  //   suspended_screen_->ResetCursorPosition();
+  //   std::cout << suspended_screen_->ResetPosition(/*clear=*/true);
+  //   suspended_screen_->dimx_ = 0;
+  //   suspended_screen_->dimy_ = 0;
+
+  //   // Reset dimensions to force drawing the screen again next time:
+  //   suspended_screen_->Uninstall();
+  // }
 
   // This screen is now active:
   g_active_screen = this;
@@ -610,7 +615,7 @@ void ScreenInteractive::Install() {
   // ensure it is fully applied:
   on_exit_functions.emplace([] { Flush(); });
 
-  on_exit_functions.emplace([this] { ExitLoopClosure()(); });
+  //on_exit_functions.emplace([this] { ExitLoopClosure()(); });
 
   // Request the terminal to report the current cursor shape. We will restore it
   // on exit.
@@ -657,6 +662,13 @@ void ScreenInteractive::Install() {
 
   SetConsoleMode(stdin_handle, in_mode);
   SetConsoleMode(stdout_handle, out_mode);
+#elif defined(__SWITCH__)
+  // --- Initialisation des services Switch ---
+  //consoleInit(NULL); // initialise la console texte ; utile pour debug/text output
+
+  // Configure l'entrée pour un joueur, styles standards de manettes
+  //padConfigureInput(1, HidNpadStyleSet_NpadStandard);
+
 #else
   for (const int signal : {SIGWINCH, SIGTSTP}) {
     InstallSignalHandler(signal);
@@ -731,10 +743,10 @@ void ScreenInteractive::Install() {
 
   quit_ = false;
   task_sender_ = task_receiver_->MakeSender();
-  event_listener_ =
-      std::thread(&EventListener, &quit_, task_receiver_->MakeSender());
+  // event_listener_ =
+  //     std::thread(&EventListener, &quit_, task_receiver_->MakeSender());
   animation_listener_ =
-      std::thread(&AnimationListener, &quit_, task_receiver_->MakeSender());
+     std::thread(&AnimationListener, &quit_, task_receiver_->MakeSender());
 }
 
 // private
diff --git a/src/ftxui/dom/benchmark_test.cpp b/src/ftxui/dom/benchmark_test.cpp
index 062cb234..e69de29b 100644
--- a/src/ftxui/dom/benchmark_test.cpp
+++ b/src/ftxui/dom/benchmark_test.cpp
@@ -1,86 +0,0 @@
-// Copyright 2021 Arthur Sonzogni. All rights reserved.
-// Use of this source code is governed by the MIT license that can be found in
-// the LICENSE file.
-#include <benchmark/benchmark.h>
-
-#include "ftxui/dom/elements.hpp"  // for gauge, separator, operator|, text, Element, hbox, vbox, blink, border, inverted
-#include "ftxui/dom/node.hpp"      // for Render
-#include "ftxui/screen/screen.hpp"  // for Screen
-
-// NOLINTBEGIN
-namespace ftxui {
-
-static void BencharkBasic(benchmark::State& state) {
-  while (state.KeepRunning()) {
-    auto document = vbox({
-                        text("Test"),
-                        separator(),
-                        hbox({
-                            gauge(0.9f),
-                            separator() | blink,
-                            gauge(0.5f),
-                            separator() | inverted,
-                            gauge(0.1f),
-                            separator(),
-                        }),
-                        text("Test"),
-                    }) |
-                    border;
-    auto root = gauge(1.0);
-    Screen screen(80, state.range(0));
-    Render(screen, root);
-    screen.ToString();
-  }
-}
-BENCHMARK(BencharkBasic)->DenseRange(0, 256, 16);
-
-static void BencharkText(benchmark::State& state) {
-  while (state.KeepRunning()) {
-    std::string content = "ＨＥＬＬＯ world ";
-    for (int i = 0; i < state.range(0); ++i) {
-      content += content;
-    }
-    auto document = paragraph(content);
-    Screen screen(200, 200);
-    Render(screen, document);
-    screen.ToString();
-  }
-}
-BENCHMARK(BencharkText)->DenseRange(0, 10, 1);
-
-static void BenchmarkStyle(benchmark::State& state) {
-  while (state.KeepRunning()) {
-    Elements elements;
-    for (int i = 0; i < state.range(0); ++i) {
-      elements.push_back(vbox({
-          text("Test") | bold,
-          text("Test") | dim,
-          text("Test") | inverted,
-          text("Test") | underlined,
-          text("Test") | underlinedDouble,
-          text("Test") | strikethrough,
-          text("Test") | color(Color::Red),
-          text("Test") | bgcolor(Color::Red),
-          text("Test") | color(Color::RGB(42, 87, 124)),
-          text("Test") | bgcolor(Color::RGB(42, 87, 124)),
-          text("Test") | color(Color::RGB(42, 87, 124)) |
-              bgcolor(Color::RGB(172, 94, 212)),
-          text("Test") | blink,
-          text("Test") | automerge,
-      }));
-      elements.push_back(separator());
-    }
-    auto document = hbox(std::move(elements));
-    Screen screen(state.range(1), state.range(1));
-    Render(screen, document);
-    screen.ToString();
-  }
-}
-BENCHMARK(BenchmarkStyle)
-    ->ArgsProduct({
-        benchmark::CreateDenseRange(1, 10, 3),     // Number of elements.
-        benchmark::CreateDenseRange(10, 200, 20),  // Screen width.
-    });
-
-}  // namespace ftxui
-// NOLINTEND
diff --git a/src/ftxui/screen/terminal.cpp b/src/ftxui/screen/terminal.cpp
index 8878a1f9..2964fc89 100644
--- a/src/ftxui/screen/terminal.cpp
+++ b/src/ftxui/screen/terminal.cpp
@@ -15,7 +15,9 @@
 
 #include <windows.h>
 #else
+#ifndef __SWITCH__
 #include <sys/ioctl.h>  // for winsize, ioctl, TIOCGWINSZ
+#endif
 #include <unistd.h>     // for STDOUT_FILENO
 #endif
 
@@ -107,6 +109,8 @@ Dimensions Size() {
   }
 
   return FallbackSize();
+#elif defined(__SWITCH__)
+  return Dimensions{80, 45};
 #else
   winsize w{};
   const int status = ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);  // NOLINT
